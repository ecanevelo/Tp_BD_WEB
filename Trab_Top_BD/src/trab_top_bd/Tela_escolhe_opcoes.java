/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trab_top_bd;
import java.io.BufferedReader; 
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.IOException; 
import java.util.ArrayList;
import java.util.Collections;

//arquivos para tratar o json
import java.io.FileNotFoundException;
import java.io.FileReader;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

//arquivos importados mongodb
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.util.JSON;
import java.awt.Desktop;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Set;


/**
 *
 * @author Everton
 */
public class Tela_escolhe_opcoes extends javax.swing.JFrame {

    /**
     * Creates new form Tela_escolhe_opcoes
     */
    public Tela_escolhe_opcoes() {
        initComponents();
        formWindowActivated();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                formComponentAdded(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Aplicação de procura das melhores instituições de Ensino, baseada em formandos e inscritos.");

        jButton1.setText("Selecionar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Federal", "Estadual", "Municipal" }));

        jButton2.setText("Sair");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 705, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 627, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(80, 80, 80)
                .addComponent(jComboBox1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_formComponentAdded

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String EstadoSelecionado;
        String TipoFacul;
        
        TipoFacul = String.valueOf(jComboBox1.getSelectedItem());
        EstadoSelecionado = String.valueOf(jComboBox2.getSelectedItem());
        
        //verificando o JSON dos arquivos
        Carrega_Inf_Est(TipoFacul, EstadoSelecionado);
        System.out.printf("Estado selecionado: %s", EstadoSelecionado);
        
        new Tela_Escolhe_Visualizacoes().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_escolhe_opcoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_escolhe_opcoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_escolhe_opcoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_escolhe_opcoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela_escolhe_opcoes().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JComboBox jComboBox2;
    
    private  void formWindowActivated(){
        jComboBox2 = new javax.swing.JComboBox();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        le_universidade();
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGap(50, 50, 50)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(237, Short.MAX_VALUE))
        );
    
    }
    
    void le_universidade(){
        //8 coluna que devera ler
        //declara a pasta que esta lendo
        String nome = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/CADASTRO DAS IES_2011.csv";
        try {
            BufferedReader lerArq = new BufferedReader(new InputStreamReader(new FileInputStream(nome), "ISO-8859-1"));

            String linha = lerArq.readLine(); // lê a primeira linha
            String vetor1[] = null;
            String acum_estad = "";

            // a variável "linha" recebe o valor "null" quando o processo
            // de repetição atingir o final do arquivo texto
            //contador para verificar se esta na 12 linha
            int contador = 1;
            while (linha != null) {
                if(contador >= 12){
                    if(linha != ""){
                        vetor1 = linha.split(";");
                        acum_estad += vetor1[8]+"-";
                    }
                }
                linha = lerArq.readLine(); // lê da segunda até a última linha
                contador++;
            }

            String vetor2[] = acum_estad.split("-");

            ArrayList aux = new ArrayList();
            for(int i=0; i<vetor2.length; i++){
                int verificador = 0;
                for(int j=0; j<aux.size(); j++){
                    
                    if(vetor2[i].equals(aux.get(j)))
                    {
                        verificador = 1;
                    }
                 }
                if(verificador == 0){
                    aux.add(vetor2[i]);
                 }
            }
            
            //usando o collection para ordenar o array list criado
            Collections.sort(aux);
            for(int i=0; i<aux.size(); i++){
                jComboBox2.addItem(aux.get(i));
            }
            
            lerArq.close();
            
        } catch (IOException e) {
            System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
        }
    }
    
    //função para carregar os dados das Universidades dependendo da escolha do usuário
    void Carrega_Inf_Est(String TipoUniver, String Estado){
        
        String Sigla = null;
        String pasta_lida1 = "";
        String pasta_lida2 = "";
        
        if(TipoUniver.equals("Federal"))
        {
            pasta_lida1 = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/Quantidade de alunos formados em graduacao nas instituicoes Federais.json";
            pasta_lida2 = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/Quantidade de alunos matriculados em Instituicoes de Ensino Superior federais por ano.json";
        }
        
        if(TipoUniver.equals("Estadual"))
        {
            pasta_lida1 = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/Quantidade de alunos formados em graduacao nas instituicoes Estaduais.json";
            pasta_lida2 = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/Quantidade de alunos matriculados em Instituicoes de Ensino Superior estadual por ano.json";
        }
        
        if(TipoUniver.equals("Municipal"))
        {
            pasta_lida1 = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/Quantidade de alunos formados em graduacao nasinstituicoes Municipais.json";
            pasta_lida2 = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/Quantidade de alunos matriculados em Instituicoes de Ensino Superior municipais por ano.json";
        }
        
        try {
            BufferedReader lerArq2 = new BufferedReader(new InputStreamReader(new FileInputStream(pasta_lida1), "ISO-8859-1"));
            BufferedReader lerArq3 = new BufferedReader(new InputStreamReader(new FileInputStream(pasta_lida2), "ISO-8859-1"));

            String linha = lerArq2.readLine(); // lê a primeira linha
            String linha2 = lerArq3.readLine(); // lê a primeira linha
           
            String Vetor_Quant_Form = "";
            String Vetor_Quant_Insc = "";
            
            //------- lendo o arquivo dos formandos -------
            // a variável "linha" recebe o valor "null" quando o processo
            // de repetição atingir o final do arquivo texto
            while (linha != null) {
                if(!linha.equals("")){
                    Vetor_Quant_Form = linha;
                }
                linha = lerArq2.readLine(); // lê da segunda até a última linha
            }
            lerArq2.close();
            
            //Criando conexão com mongodb e inserindo JSONs
            MongoClient mongoClient = new MongoClient("localhost", 27017);
            DB db = mongoClient.getDB("test");
            
            //criando chamada a tela de aguarde
            
            String CollectionName = "QuantidadeAprovados";
            
            //apagando a collection caso ela ja exista
            if(db.collectionExists(CollectionName))
            {
                DBCollection table = db.getCollection("QuantidadeAprovados");
                db.dropDatabase();
            }
            if(!db.collectionExists(CollectionName))
            {
              DBCollection table = db.createCollection(CollectionName, new BasicDBObject());
            }

            DBCollection table = db.getCollection("QuantidadeAprovados");
            
            //para inserir o JSON coloco um split em cima de ,}
            //dividindo a string em várias e inserindo o símbolo }
            //depois das strings, menos na última
            String Vetor_Quant_Forms[];
            Vetor_Quant_Forms = Vetor_Quant_Form.split("},");
            String a;
            int total = Vetor_Quant_Form.length();
            
            for(int i=0; i<Vetor_Quant_Forms.length; i++){
                               
                if(i < (Vetor_Quant_Forms.length - 1))
                    a = Vetor_Quant_Forms[i]+"}";
                else
                    a = Vetor_Quant_Forms[i];

                DBObject dbObject = (DBObject) JSON.parse(a);
                table.insert(dbObject);
            }
            
            //------- lendo o arquivo dos inscritos -------
            // a variável "linha2" recebe o valor "null" quando o processo
            // de repetição atingir o final do arquivo texto
            while (linha2 != null) {
                if(!linha2.equals("")){
                    Vetor_Quant_Insc = linha2;
                }
                linha2 = lerArq3.readLine(); // lê da segunda até a última linha
            }
            lerArq3.close();
            
            //Criando a collection mongodb e inserindo JSONs
            String CollectionName2 = "QuantidadeInscritos";
            
            if(db.collectionExists(CollectionName2))
            {
                DBCollection table2 = db.getCollection("QuantidadeInscritos");
                db.dropDatabase();
            }
            if(!db.collectionExists(CollectionName2))
            {
              DBCollection table2 = db.createCollection(CollectionName2, new BasicDBObject());
            }

            DBCollection table2 = db.getCollection("QuantidadeInscritos");
            
            //para inserir o JSON coloco um split em cima de ,}
            //dividindo a string em várias e inserindo o símbolo }
            //depois das strings, menos na última
            String Vetor_Quant_Inscrs[];
            Vetor_Quant_Inscrs = Vetor_Quant_Insc.split("},");
            String b;
            
            for(int i=0; i<Vetor_Quant_Inscrs.length; i++){
                               
                if(i < (Vetor_Quant_Inscrs.length - 1))
                    b = Vetor_Quant_Inscrs[i]+"}";
                else
                    b = Vetor_Quant_Inscrs[i];

                DBObject dbObject = (DBObject) JSON.parse(b);
                table2.insert(dbObject);
            }
            
            //------------- Arquivo de leitura das instituições --------------       
            //8 coluna que devera ler
            //declara a pasta que esta lendo
            String nome = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/CADASTRO DAS IES_2011.csv";

            try {
                BufferedReader lerArq = new BufferedReader(new InputStreamReader(new FileInputStream(nome), "ISO-8859-1"));

                linha = lerArq.readLine(); // lê a primeira linha
                String vetor1[] = null;
                String acum_estad = "";

                // a variável "linha" recebe o valor "null" quando o processo
                // de repetição atingir o final do arquivo texto
                //contador para verificar se esta na 12 linha
                int contador = 1;
                
                while (linha != null) {
                    if(contador >= 12){
                        if(linha != ""){
                            vetor1 = linha.split(";");

                            //verificando se estado é igual ao escolhido pelo usuário
                            if(vetor1[8].equals(Estado)){
                                acum_estad += "{'nome_institu':'"+vetor1[2]+"',"+"'estado':'"+vetor1[8]+"',"+"'siglaEsta':'"+vetor1[9]+"',"+"'municipio':'"+vetor1[10]+"',"+"'codMunici':"+vetor1[11]+","+"'catIns':'"+vetor1[20]+"'}-=";
                                Sigla = vetor1[9];
                            }
                        }
                    }
                    linha = lerArq.readLine(); // lê da segunda até a última linha
                    contador++;
                }

                String vetor_estados[] = acum_estad.split("-=");
                lerArq.close();

                //Criando a collection mongodb e inserindo JSONs
                String CollectionName3 = "Instituicoes";

                if(db.collectionExists(CollectionName3))
                {
                    DBCollection table3 = db.getCollection("Instituicoes");
                    db.dropDatabase();
                }
                
                if(!db.collectionExists(CollectionName3))
                {
                  DBCollection table3 = db.createCollection(CollectionName3, new BasicDBObject());
                }

                DBCollection table3 = db.getCollection("Instituicoes");
                
                //Json ja tinha sido criado e o split executado, faltava apenas repassar e inserir
                //verificar se ocorre erro na ultima linha
                String c;
                for(int i=0; i<vetor_estados.length; i++){
                        c = vetor_estados[i];
                    DBObject dbObject = (DBObject) JSON.parse(c);
                    table3.insert(dbObject);
                }
            } catch (IOException e) {
                    System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
            }
            
            
            //------------- Arquivo de leitura das latitudes e lonitudes --------------       
            //declara a pasta que esta lendo
            String nome2 = "C:/Users/Everton/myJavaPrograms/Trab_Top_BD/dados_trabalhados/MunicipiosBrasil.csv";

            try {
                BufferedReader lerArq4 = new BufferedReader(new InputStreamReader(new FileInputStream(nome2), "ISO-8859-1"));

                linha = lerArq4.readLine(); // lê a primeira linha
                String vetor1[] = null;
                String acum_estad = "";

                // a variável "linha" recebe o valor "null" quando o processo
                // de repetição atingir o final do arquivo texto
                //contador para verificar se esta na 2 linha
                int contador = 1;
                while (linha != null) {
                    if(contador >= 2){
                        if(linha != ""){
                            vetor1 = linha.split(";");

                            //verificando se estado é igual ao escolhido pelo usuário
                            if(vetor1[5].equals(Sigla))
                                acum_estad += "{'municipio':'"+vetor1[4]+"',"+"'siglaEsta':'"+vetor1[5]+"',"+"'lattitude':'"+vetor1[1]+"',"+"'longitude':'"+vetor1[2]+"'}-=";
                        }
                    }
                    linha = lerArq4.readLine(); // lê da segunda até a última linha
                    contador++;
                }

                String vetor_estados2[] = acum_estad.split("-=");
                lerArq4.close();
                
                //Criando a collection mongodb e inserindo JSONs
                String CollectionName4 = "InfGeograficas";

                if(db.collectionExists(CollectionName4))
                {
                    DBCollection table4 = db.getCollection("InfGeograficas");
                    db.dropDatabase();
                }
                if(!db.collectionExists(CollectionName4))
                {
                  DBCollection table4 = db.createCollection(CollectionName4, new BasicDBObject());
                }

                DBCollection table4 = db.getCollection("InfGeograficas");

                //Json ja tinha sido criado e o split executado, faltava apenas repassar e inserir
                //verificar se ocorre erro na ultima linha
                String d;

                for(int i=0; i<vetor_estados2.length; i++){
                        d = vetor_estados2[i];
                    DBObject dbObject2 = (DBObject) JSON.parse(d);
                    table4.insert(dbObject2);
                }
                
            } catch (IOException e) {
                    System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
            }
        } catch (IOException e) {
            System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
        }
    }
}