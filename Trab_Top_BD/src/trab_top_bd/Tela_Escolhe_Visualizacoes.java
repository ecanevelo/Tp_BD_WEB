/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package trab_top_bd;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import com.mongodb.util.JSON;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.simple.parser.JSONParser;
import org.json.simple.JSONValue;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.graphdb.Result;
import org.neo4j.graphdb.Transaction;
import org.neo4j.graphdb.factory.GraphDatabaseFactory;
import scala.util.parsing.combinator.Parsers;

/**
 *
 * @author Everton
 */
public class Tela_Escolhe_Visualizacoes extends javax.swing.JFrame {

    /**
     * Creates new form Tela_Escolhe_Visualizacoes
     */
    public Tela_Escolhe_Visualizacoes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Escolha do Tipo de Visualização que deseja obter");

        jButton1.setText("Visualizar Instituição por Município");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Fechar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(205, 205, 205)
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(jButton1)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 186, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        visualiza_quant_municipio();
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaQuantUniEsta frame = new TelaQuantUniEsta();
                frame.setVisible(true);
                frame.criaOpcoes();
            }
        });
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela_Escolhe_Visualizacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela_Escolhe_Visualizacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela_Escolhe_Visualizacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela_Escolhe_Visualizacoes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela_Escolhe_Visualizacoes().setVisible(true);
            }
        });
    }
    
    void visualiza_quant_municipio(){
        
        String DB_PATH = "../../Downloads/neo4j-enterprise-2.3.0-M01-windows/neo4j-enterprise-2.3.0-M01/data/graph.db";
        
        MongoClient mongoClient = new MongoClient("localhost", 27017);
        DB db = mongoClient.getDB("test");

        //criando variáveis para armazenar as instituições correspondentes 
        //cada variável correspondente a uma collection existente
        DBCollection table_Form = db.getCollection("QuantidadeAprovados");
        DBCollection table_Matr = db.getCollection("QuantidadeInscritos");
        DBCollection table_Muni = db.getCollection("InfGeograficas");
        DBCollection table_IES = db.getCollection("Instituicoes");
        
        //variável para armazenar código do município
        int codMunic, auxcodMunic;
        String aux_array;
        String no_Estado="";
        String no_Municipio="";
        String co_Municipio="";
        String array_Muni[] = no_Municipio.split("//");
        String no_Universidade;
        
         // START SNIPPET: addData
        GraphDatabaseService db_Neo = new GraphDatabaseFactory().newEmbeddedDatabase( DB_PATH );
        
        //apagando Nodes caso eles existam
        try ( Transaction tx = db_Neo.beginTx())
        {
            Result result = db_Neo.execute( "match (a)-[b]->(c) delete a, b, c" );
            tx.success();
        }
        
        int max_valor_ano = 2008;
        //verificador de criação do Estado
        int verif_cria_estado = 0;
        
        //apontador para arquivo table_IES
        DBCursor cursor_IES = table_IES.find();
        
	while (cursor_IES.hasNext()) { //inicio While
            aux_array = cursor_IES.next().toString();
            int valor_verif = 0;

            JSONParser parser = new JSONParser();
            JSONObject jsonObj = new JSONObject();
            
            try {
                    jsonObj = (JSONObject) parser.parse(aux_array);
                    String Municipio = jsonObj.get("municipio").toString();
                    String Instituicao = jsonObj.get("nome_institu").toString();
                    String Cod_Muni_Lido=jsonObj.get("codMunici").toString();
                    no_Estado = jsonObj.get("estado").toString();
                    
                     //verificando e criando nó do estado no NEO4J
                    if(verif_cria_estado == 0){
                        try ( Transaction tx = db_Neo.beginTx())
                        {
                            Result result = db_Neo.execute( "create (e: Estado {name: '"+no_Estado+"'})" );
                            tx.success();
                        }
                    }
                    
                    //leu o Json do mongodb e verifica se é um municipio diferente do que já foi lido
                    for(int j=0; j<array_Muni.length; j++){
                        if(array_Muni[j].equals(Municipio)){
                            valor_verif = 1;
                        }
                    }
                    
                    if(valor_verif == 0){
                        no_Municipio += Municipio+"//";
                        co_Municipio += Cod_Muni_Lido+"//";
                        array_Muni = no_Municipio.split("//");
                        
                        //1º passo: Cria nó municipio 2º passo: Cria nó Instituicao 3º passo: Cria Relacionamento
                        try ( Transaction tx = db_Neo.beginTx())
                        {
                            Result result = db_Neo.execute( "create (m: Municipio {name: '"+Municipio+"'})" );
                            tx.success();
                        }
                        try ( Transaction tx = db_Neo.beginTx())
                        {
                            Result result = db_Neo.execute( "create (i: Instituicao {name: '"+Instituicao+"'})" );
                            tx.success();
                        }
                        try ( Transaction tx = db_Neo.beginTx())
                        {
                            Result result = db_Neo.execute( "match (e:Estado),(m:Municipio),(i:Instituicao) where i.name='"+Instituicao+"' and e.name='"+no_Estado+"' and m.name='"+Municipio+"' create (i)-[:Pertence]->(m)-[:Local_Em]->(e)" );
                            tx.success();
                        }
                    }
                    else{
                        //1º passo: Cria nó Instituicao 2º passo: Cria Relacionamento
                        try ( Transaction tx = db_Neo.beginTx())
                        {
                            Result result = db_Neo.execute( "create (i: Instituicao {name: '"+Instituicao+"'})" );
                            tx.success();
                        }
                        try ( Transaction tx = db_Neo.beginTx())
                        {
                            Result result = db_Neo.execute( "match (e:Estado),(m:Municipio),(i:Instituicao) where i.name='"+Instituicao+"' and e.name='"+no_Estado+"' and m.name='"+Municipio+"' create (i)-[:Pertence]->(m)" );
                            tx.success();
                        }
                    }
                }
            catch (ParseException e) {
                e.printStackTrace();
            }
            
            verif_cria_estado++;
	}//fim while
        
        //alterando valor total dos municipios cadastrados e inserindo a posicao
        String array_cod_Muni[] = co_Municipio.split("//");
        for(int j=0; j<array_Muni.length; j++){
            
        //apontador para arquivo table_Matr
        DBCursor cursorMatr = table_Matr.find();
        //apontador para arquivo table_Form
        DBCursor cursorForm = table_Form.find();
        //apontador para arquivo table_InMuni
        DBCursor cursorInMuni = table_Muni.find();
        
            int soma_Form = 0;
            int soma_Insc = 0;
            String latitude = null;
            String longitude = null;
            
            //lendo arquivos dos inscritos
             while (cursorMatr.hasNext()) { //inicio While
                 aux_array = cursorMatr.next().toString();
                 JSONParser parser = new JSONParser();
                 JSONObject jsonObj = new JSONObject();
            
                 try {
                     jsonObj = (JSONObject) parser.parse(aux_array);
                     String cod_Muni = jsonObj.get("municipio_ibge").toString();
                     String total_Muni =  jsonObj.get("valor").toString();
                     
                     if(cod_Muni.equals(array_cod_Muni[j].toString())){
                         //System.out.printf("Igual\n");
                         soma_Insc = soma_Insc + Integer.valueOf(total_Muni);
                     }
                }
                catch (ParseException e) {
                    e.printStackTrace();
                 }
            }
            
            //lendo arquivos dos formados
            while (cursorForm.hasNext()) { //inicio While
                 aux_array = cursorForm.next().toString();
                 JSONParser parser = new JSONParser();
                 JSONObject jsonObj = new JSONObject();
            
                 try {
                     jsonObj = (JSONObject) parser.parse(aux_array);
                     String cod_Muni = jsonObj.get("municipio_ibge").toString();
                     String total_Muni =  jsonObj.get("valor").toString();
                     
                     if(cod_Muni.equals(array_cod_Muni[j].toString())){
                         soma_Form = soma_Form + Integer.valueOf(total_Muni);
                     }
                }
                catch (ParseException e) {
                    e.printStackTrace();
                 }
            }
            
            //lendo arquivos das posições geograficas
            while (cursorInMuni.hasNext()) { //inicio While
                 aux_array = cursorInMuni.next().toString();
                 JSONParser parser = new JSONParser();
                 JSONObject jsonObj = new JSONObject();
            
                 try {
                     jsonObj = (JSONObject) parser.parse(aux_array);
                     String nome_mun_lido = jsonObj.get("municipio").toString();
                     String lat_lido = jsonObj.get("lattitude").toString();
                     String lon_lido = jsonObj.get("longitude").toString();
                     String comp_array;
                     
                     nome_mun_lido = nome_mun_lido.replace(" ", "");
                     comp_array = array_Muni[j].replace(" ", "");
                     
                     //System.out.printf("Mun_lido, %s - Mun_comp %s \n", nome_mun_lido, comp_array);
                     
                     if(nome_mun_lido.equalsIgnoreCase(comp_array)){
                         latitude = lat_lido;
                         longitude =lon_lido;
                         break;
                     }
                }
                catch (ParseException e) {
                    e.printStackTrace();
                 }
            }
            
            try ( Transaction tx = db_Neo.beginTx()){
                 Result result = db_Neo.execute( "MATCH (Municipio { name:'"+array_Muni[j]+"'}) SET Municipio += {quant_formados:"+soma_Form+", quant_inscritos:"+soma_Insc+", latitude:'"+latitude+"', longitude:'"+longitude+"'}");
                 tx.success();
            }
        }
        
        //criar a visulização do Mapa Geográfico
        //lendo texto da pagina php e editando
        //apontador para arquivo table_InMuni
        String nome = "C:/xampp/htdocs/Projeto_tp_bd/Mapa.php";
        String vetor_array_inf = "";
        
        //lendo a consulta do Neo4J e gravando em um vetor
        try ( Transaction ignored = db_Neo.beginTx();
            Result result = db_Neo.execute( "match (e:Estado),(m:Municipio),(i:Instituicao) return i.name, e.name, m.name, m.latitude, m.longitude" ) )
        {
            while ( result.hasNext() )
            {
                Map<String,Object> row = result.next();
                int i = 1;
                
                for ( Map.Entry<String,Object> column : row.entrySet() )
                {
                    //if(i == 5)
                       //System.out.printf(" Município %s\n", column.getValue());
                    //else if(i == 1)
                        //System.out.printf(" Estado %s", column.getValue());
                    //else if(i == 2)
                        //System.out.printf(" Instituição %s", column.getValue());
                    if(i == 3){
                        vetor_array_inf += column.getValue().toString()+";";
                        //System.out.printf(" latitude %s", column.getValue());
                    }
                    else if(i == 4){
                        vetor_array_inf += column.getValue().toString()+"//";
                        //System.out.printf(" longitude %s", column.getValue());
                    }
                        
                    i++;
                }
            }
        }
        //fechando conexão com o Neo4J
        db_Neo.shutdown();
        System.out.printf("Execução Terminada!");

        try {
            BufferedReader lerArq = new BufferedReader(new InputStreamReader(new FileInputStream(nome), "ISO-8859-1"));
            BufferedWriter escreve= new BufferedWriter(new BufferedWriter(new FileWriter("C:/xampp/htdocs/Projeto_tp_bd/Mapa_cover.php")));
            
            String linha;
            linha = lerArq.readLine(); // lê a primeira linha
                int contador = 1;
                int permite = 0;
                int j=0;
                String array_inf[] = vetor_array_inf.split("//");
                
                while (linha != null) {
                    if(permite == 1){
                        for(j=0; j<array_inf.length; j++){
                            String vetor_latLong[] = array_inf[j].split(";");

                            if(j<(array_inf.length - 1))
                                escreve.write("new google.maps.LatLng("+vetor_latLong[0].replace(",", ".")+", "+vetor_latLong[1].replace(",", ".")+"),\n");
                            else
                                escreve.write("new google.maps.LatLng("+vetor_latLong[0].replace(",", ".")+", "+vetor_latLong[1].replace(",", ".")+")\n");
                        }
                        permite=0;
                    }
                    if(linha.equals("//variavel_pos_deinicio")){
                        permite = 1;
                    }
                    
                    if(permite == 2){
                        String nome_temp = no_Estado.replace(" ", "");
                        escreve.write("var teste = processa("+nome_temp+");\n");
                        permite=0;
                    }
                    
                    if(linha.equals("//variavel_ESTADO")){
                        permite = 2;
                    }
                    
                    escreve.write(linha+"\n");
                    
                    linha = lerArq.readLine(); // lê da segunda até a última linha
                    contador++;
                }
                escreve.close();
                lerArq.close();
                
            } catch (IOException e) {
                    System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
            }
    }
    
    //nova funçao mostra a porcentagem das universidades, total de inscritos vs formandos
    void calcula_For_Ins(){
        //criar a visulização do Mapa Geográfico
        //lendo texto da pagina php e editando
        //apontador para arquivo table_InMuni
        String nome = "C:/xampp/htdocs/Projeto_tp_bd/Mapa_Quant.php";
        String vetor_array_inf = "";
        
        String DB_PATH = "../../Downloads/neo4j-enterprise-2.3.0-M01-windows/neo4j-enterprise-2.3.0-M01/data/graph.db";
        GraphDatabaseService db_Neo = new GraphDatabaseFactory().newEmbeddedDatabase( DB_PATH );
        //lendo a consulta do Neo4J e gravando em um vetor
        try ( Transaction ignored = db_Neo.beginTx();
            Result result = db_Neo.execute( "match (e:Estado),(m:Municipio),(i:Instituicao) where m.quant_inscritos>0 return i.name, e.name, m.name, m.latitude, m.longitude, m.quant_formados, m.quant_inscritos" ) )
        {
            String compara_Mun = "";
            String Guarda_lat = "";
            String Guarda_lon = "";
            int valor_Quant_Total = 0;
            int valor_Quant_Parci = 0;
            int valor_Total_Total = 0;
            int valor_Total_Parci = 0;
           // String Guarda_Vetor[];
            int j=0;
            while ( result.hasNext() )
            {
                Map<String,Object> row = result.next();
                int i = 1;
                
                for ( Map.Entry<String,Object> column : row.entrySet() )
                {
                    if(i==7){
                        if(!compara_Mun.equals(column.getValue().toString())){
                            if(compara_Mun.equals("")){
                                compara_Mun = column.getValue().toString();
                                valor_Total_Total = valor_Quant_Total;
                                valor_Total_Parci = valor_Quant_Parci;
                                
                               // Guarda_Vetor[j] = Guarda_lat+"//"+Guarda_lon+"//";
                            }
                            else{
                                int auxi_Cal = valor_Total_Total/valor_Total_Parci;
                                //Guarda_Vetor[j] = compara_Mun+"//"+auxi_Cal+"//";
                                        
                                compara_Mun = column.getValue().toString();
                                valor_Total_Total = valor_Quant_Total;
                                valor_Total_Parci = valor_Quant_Parci;
                                j++;
                                
                                //Guarda_Vetor[j] = Guarda_lat+"//"+Guarda_lon+"//";
                            }
                        }
                        else{
                            valor_Total_Total += valor_Quant_Total;
                            valor_Total_Parci += valor_Quant_Parci;
                        }
                    }
                    if(i == 7)
                       System.out.printf(" Município %s\n", column.getValue());
                    else if(i == 1)
                        System.out.printf(" Estado %s", column.getValue());
                    else if(i == 2)
                        System.out.printf(" Instituição %s", column.getValue());
                    else if(i == 3){
                        Guarda_lon = column.getValue().toString();
                        //vetor_array_inf += column.getValue().toString()+";";
                        //System.out.printf(" latitude %s", column.getValue());
                    }
                    else if(i == 5){
                        Guarda_lat = column.getValue().toString();
                        //vetor_array_inf += column.getValue().toString()+"//";
                        //System.out.printf(" longitude %s", column.getValue());
                    }
                    else if(i == 4){
                        //valor_Quant_Total = (int) column.getValue();
                        //System.out.printf(" quantidade total %s", column.getValue());
                    }
                    else if(i == 6){
                        //valor_Quant_Parci = (int) column.getValue();
                        //System.out.printf(" quantidade parcial %s\n", column.getValue());
                    }
                       
                        
                    i++;
                }
            }
        }
        //fechando conexão com o Neo4J
        db_Neo.shutdown();
        System.out.printf("Execução Terminada!");
        /*
        try {
            BufferedReader lerArq = new BufferedReader(new InputStreamReader(new FileInputStream(nome), "ISO-8859-1"));
            BufferedWriter escreve= new BufferedWriter(new BufferedWriter(new FileWriter("C:/xampp/htdocs/Projeto_tp_bd/Mapa_cover.php")));
            
            String linha;
            linha = lerArq.readLine(); // lê a primeira linha
                int contador = 1;
                int permite = 0;
                int j=0;
                String array_inf[] = vetor_array_inf.split("//");
                
                while (linha != null) {
                    if(permite == 1){
                        for(j=0; j<array_inf.length; j++){
                            String vetor_latLong[] = array_inf[j].split(";");

                            if(j<(array_inf.length - 1))
                                escreve.write("new google.maps.LatLng("+vetor_latLong[0].replace(",", ".")+", "+vetor_latLong[1].replace(",", ".")+"),\n");
                            else
                                escreve.write("new google.maps.LatLng("+vetor_latLong[0].replace(",", ".")+", "+vetor_latLong[1].replace(",", ".")+")\n");
                        }
                        permite=0;
                    }
                    if(linha.equals("//variavel_pos_deinicio")){
                        permite = 1;
                    }
                    
                    if(permite == 2){
                        String nome_temp = no_Estado.replace(" ", "");
                        escreve.write("var teste = processa("+nome_temp+");\n");
                        permite=0;
                    }
                    
                    if(linha.equals("//variavel_ESTADO")){
                        permite = 2;
                    }
                    
                    escreve.write(linha+"\n");
                    
                    linha = lerArq.readLine(); // lê da segunda até a última linha
                    contador++;
                }
                escreve.close();
                lerArq.close();
                
            } catch (IOException e) {
                    System.err.printf("Erro na abertura do arquivo: %s.\n", e.getMessage());
            }
                */
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
